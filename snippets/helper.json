{
    "Helper-array-add": {
        "prefix": "array_add",
        "body": [
            "array_add(${1:\\$array}, ${2:'key'}, ${3:'value'})$4"
        ],
        "description": "Add an element to an array using \"dot\" notation if it doesn't exist."
    },
    "Helper-array-collapse": {
        "prefix": "array_collapse",
        "body": [
            "array_collapse(${1:\\$array})$2"
        ],
        "description": "Collapse an array of arrays into a single array."
    },
    "Helper-array-data_get": {
        "prefix": "array-data_get",
        "body": [
            "data_get(${1:\\$array}, ${2:'names.john'}, ${3:'default'})$4"
        ],
        "description": "Get an item from an array using \"dot\" notation."
    },
    "Helper-array-divide": {
        "prefix": "array_divide",
        "body": [
            "list(${1:\\$keys}, ${2:\\$values}) = array_divide(${3:\\$array})$4"
        ],
        "description": "Divide an array into two arrays. One with keys and the other with values."
    },
    "Helper-array-dot": {
        "prefix": "array_dot",
        "body": [
            "array_dot(${1:\\$array})$2"
        ],
        "description": "Flatten a multi-dimensional associative array with dots."
    },
    "Helper-array-end": {
        "prefix": "array-last",
        "body": [
            "last(${1:\\$array)$2"
        ],
        "description": "Get the last element of an array. Useful for method chaining."
    },
    "Helper-array-except": {
        "prefix": "array_except",
        "body": [
            "array_except(${1:\\$array}, ${2:['key', 'otherKey']})$3"
        ],
        "description": "Get all of the given array except for a specified array of items."
    },
    "Helper-array-first": {
        "prefix": "array_first",
        "body": [
            "array_first(${1:\\$array}, function (${2:\\$key}, ${3:\\$value}) {",
            "    return ${4:\\$value >= 150;}",
            "});$5"
        ],
        "description": "Return the first element in an array passing a given truth test."
    },
    "Helper-array-flatten": {
        "prefix": "array_flatten",
        "body": [
            "array_flatten(${1:\\$array})$2"
        ],
        "description": "Will flatten a multi-dimensional array into a single level."
    },
    "Helper-array-forget": {
        "prefix": "array_forget",
        "body": [
            "array_forget(${1:\\$array}, ${2:'names.joe'})$3"
        ],
        "description": "Remove one or many array items from a given array using \"dot\" notation."
    },
    "Helper-array-get": {
        "prefix": "array_get",
        "body": [
            "array_get(${1:\\$array}, ${2:'names.john'}, ${3:'default'})$4"
        ],
        "description": "Get an item from an array using \"dot\" notation."
    },
    "Helper-array-has": {
        "prefix": "array_has",
        "body": [
            "array_has(${1:\\$array}, ${2:key})$3"
        ],
        "description": "Check if an item exists in an array using \"dot\" notation."
    },
    "Helper-array-head": {
        "prefix": "head",
        "body": [
            "head(${1:\\$array})$2"
        ],
        "description": "Get the first element of an array. Useful for method chaining."
    },
    "Helper-array-last": {
        "prefix": "array_last",
        "body": [
            "array_last(${1:\\$array}, function (${2:\\$key}, ${3:\\$value}) {",
            "    return ${4:\\$value >= 150;}",
            "});$5"
        ],
        "description": "Return the last element in an array passing a given truth test."
    },
    "Helper-array-only": {
        "prefix": "array_only",
        "body": [
            "array_only(${1:\\$array}, ${2:['key', 'otherKey']})$3"
        ],
        "description": "Get a subset of the items from the given array."
    },
    "Helper-array-pluck": {
        "prefix": "array_pluck",
        "body": [
            "array_pluck(${1:\\$array}, ${2:'value'})$3"
        ],
        "description": "Pluck an array of values from an array."
    },
    "Helper-array-prepend": {
        "prefix": "array_prepend",
        "body": [
            "array_prepend(${1:\\$array}, ${2:'value'})$3"
        ],
        "description": "Push an item onto the beginning of an array."
    },
    "Helper-array-pull": {
        "prefix": "array_pull",
        "body": [
            "array_pull(${1:\\$array}, ${2:'value'})$3"
        ],
        "description": "Get a value from the array, and remove it."
    },
    "Helper-array-set": {
        "prefix": "array_set",
        "body": [
            "array_set(${1:\\$array}, ${2:'products.desk.price'}, ${3:200})$4"
        ],
        "description": "Set an array item to a given value using \"dot\" notation."
    },
    "Helper-array-sort-recursive": {
        "prefix": "array_sort_recursive",
        "body": [
            "array_sort_recursive(${1:\\$array});$2"
        ],
        "description": "Recursively sort an array by keys and values."
    },
    "Helper-array-sort": {
        "prefix": "array_sort",
        "body": [
            "array_values(array_sort(${1:\\$array}, function (${2:\\$key}, ${3:\\$value}) {",
            "    return ${3:\\$value}['${4:name}'];",
            "}));$5"
        ],
        "description": "Sort the array using the given callback."
    },
    "Helper-array-where": {
        "prefix": "array_where",
        "body": [
            "array_where(${2:\\$array}, function (${3:\\$key}, ${4:\\$value}) {",
            "    return ${4:is_string(\\$value);}",
            "});$5"
        ],
        "description": "Filter the array using the given callback."
    },
    "Helper-misc-class_uses-recursive": {
        "prefix": "misc-class_uses_recursive",
        "body": [
            "class_uses_recursive(${1:'Foo\\Bar\\Baz'})$2"
        ],
        "description": "Returns all traits used by a class, its subclasses and trait of their traits."
    },
    "Helper-misc-collect": {
        "prefix": "collect",
        "body": [
            "collect(${1:'Foo\\Bar\\Baz'})$2"
        ],
        "description": "Create a collection from the given value."
    },
    "Helper-misc-csrf_field": {
        "prefix": "csrf_field",
        "body": [
            "csrf_field()"
        ],
        "description": "Get the value of the current CSRF token."
    },
    "Helper-misc-csrf_token": {
        "prefix": "csrf_token",
        "body": [
            "csrf_token()"
        ],
        "description": "Get the value of the current CSRF token."
    },
    "Helper-misc-dd": {
        "prefix": "dd",
        "body": [
            "dd(${1:\\$value});$2"
        ],
        "description": "Dump the passed variables and end the script."
    },
    "Helper-misc-object_get": {
        "prefix": "object_get",
        "body": [
            "object_get(${1:\\$object, ${2:'names.john'}, ${3:'default'})$4"
        ],
        "description": "Get an item from an object using \"dot\" notation."
    },
    "Helper-misc-trait_uses-recursive": {
        "prefix": "trait_uses_recursive",
        "body": [
            "trait_uses_recursive(${1:'Foo\\Bar\\Baz'})$2"
        ],
        "description": "Returns all traits used by a trait and its traits."
    },
    "Helper-path-app": {
        "prefix": "app-path",
        "body": [
            "app_path()"
        ],
        "description": "Get the fully qualified path to the app directory."
    },
    "Helper-path-base": {
        "prefix": "base-path",
        "body": [
            "base_path(${1:'file'})$2"
        ],
        "description": "Get the fully qualified path to the root of the application install."
    },
    "Helper-path-config": {
        "prefix": "config-path",
        "body": [
            "config_path()"
        ],
        "description": "Get the fully qualified path to the app directory."
    },
    "Helper-path-elixir": {
        "prefix": "elixir",
        "body": [
            "elixir('${1:file}')$2"
        ],
        "description": "Get the path to the versionned Elixir file."
    },
    "Helper-path-public": {
        "prefix": "public-path",
        "body": [
            "public_path()"
        ],
        "description": "Get the fully qualified path to the public directory."
    },
    "Helper-path-storage": {
        "prefix": "storage-path",
        "body": [
            "storage_path(${1:'file'})$2"
        ],
        "description": "Get the fully qualified path to the app/storage directory."
    },
    "Helper-strings-camel_case": {
        "prefix": "camel_case",
        "body": [
            "camel_case(${1:'foo_bar'})$2"
        ],
        "description": "Convert a value to camel case."
    },
    "Helper-strings-class_basename": {
        "prefix": "class_basename",
        "body": [
            "class_basename(${1:'Foo\\Bar\\Baz'})$2"
        ],
        "description": "Get the class \"basename\" of the given object / class."
    },
    "Helper-strings-e": {
        "prefix": "e",
        "body": [
            "e(${1:'<html>foo</html>'})$2"
        ],
        "description": "Escape HTML entities in a string."
    },
    "Helper-strings-ends_with": {
        "prefix": "ends_with",
        "body": [
            "ends_with(${1:'haystack'}, ${2:'needles'})$3"
        ],
        "description": "Determine if a given string ends with a given substring."
    },
    "Helper-strings-snake_case": {
        "prefix": "snake_case",
        "body": [
            "snake_case(${1:'fooBar'})$2"
        ],
        "description": "Convert the given string to snake_case."
    },
    "Helper-strings-starts_with": {
        "prefix": "starts_with",
        "body": [
            "starts_with(${1:'haystack'}, ${2:'needle'})$3"
        ],
        "description": "Determine if the given haystack begins with the given needle."
    },
    "Helper-strings-str_contains": {
        "prefix": "str_contains",
        "body": [
            "str_contains(${1:'This is my name'}, ${2:'my'})$3"
        ],
        "description": "Determine if the given haystack contains the given needle."
    },
    "Helper-strings-str_finish": {
        "prefix": "str_finish",
        "body": [
            "str_finish(${1:'this/string'}, ${2:'/'})$3"
        ],
        "description": "Determine if a given string matches a given pattern. Asterisks may be used to indicate wildcards."
    },
    "Helper-strings-str_is": {
        "prefix": "str_is",
        "body": [
            "str_is(${1:'foo*'}, ${2:'foobar'})$3"
        ],
        "description": "Add a single instance of the given needle to the haystack. Remove any extra instances."
    },
    "Helper-strings-str_limit": {
        "prefix": "str_limit",
        "body": [
            "str_limit(${1:\\$value}, ${2:100})$3"
        ],
        "description": "Limit the number of characters in a string."
    },
    "Helper-strings-str_random": {
        "prefix": "str_random",
        "body": [
            "str_random(${1:40})$2"
        ],
        "description": "Generate a random string of the given length."
    },
    "Helper-strings-str_singular": {
        "prefix": "str_singular",
        "body": [
            "str_singular(${1:'string'})$2"
        ],
        "description": "Convert a string to its singular form (English only)."
    },
    "Helper-strings-str_slug": {
        "prefix": "str_slug",
        "body": [
            "str_slug(${1:'fooBar'})$2"
        ],
        "description": "Generate a URL friendly \"slug\" from a given string."
    },
    "Helper-strings-studly_case": {
        "prefix": "studly_case",
        "body": [
            "studly_case(${1:'foo_bar'})$2"
        ],
        "description": "Convert the given string to StudlyCase."
    },
    "Helper-strings-title_case": {
        "prefix": "title_case",
        "body": [
            "title_case(${1:'fooBar'})$2"
        ],
        "description": "Convert a value to title case."
    },
    "Helper-strings-trans": {
        "prefix": "trans",
        "body": [
            "trans(${1:'validation.required'})$2"
        ],
        "description": "Translate a given language line. Alias of Lang::get."
    },
    "Helper-strings-trans_choice": {
        "prefix": "trans_choice",
        "body": [
            "trans_choice(${1:'foo.bar'}, ${2:\\$count})$3"
        ],
        "description": "Translate a given language line with inflection. Alias of Lang::choice."
    },
    "Helper-strings_plural": {
        "prefix": "str_plural",
        "body": [
            "str_plural(${1:'string'})$2"
        ],
        "description": "Convert a string to its plural form (English only)."
    },
    "Helper-url-action": {
        "prefix": "action",
        "body": [
            "action(${1:'HomeController@getIndex'}, ${2:\\$params})$3"
        ],
        "description": "Generate a URL for a given controller action."
    },
    "Helper-url-asset": {
        "prefix": "asset",
        "body": [
            "asset(${1:'img/photo.jpg'})$2"
        ],
        "description": "Generate a URL for an asset."
    },
    "Helper-url-route": {
        "prefix": "route",
        "body": [
            "route(${1:'routeName'}, ${2:\\$params})$3"
        ],
        "description": "Generate a URL for a given named route."
    },
    "Helper-url-secure_asset": {
        "prefix": "secure_asset",
        "body": [
            "secure_asset(${1:'foo/bar'}, ${2:\\$title}, ${3:\\$attributes})$4"
        ],
        "description": "Generate a HTML link to the given asset using HTTPS."
    },
    "Helper-url-secure_url": {
        "prefix": "secure_url",
        "body": [
            "secure_url(${1:'foo/bar'}, ${2:\\$parameters})$3"
        ],
        "description": "Generate a fully qualified URL to a given path using HTTPS."
    },
    "Helper-url": {
        "prefix": "url",
        "body": [
            "url(${1:'foo/bar'}, ${2:\\$parameters}, ${3:\\$secure})$4"
        ],
        "description": "Generate a fully qualified URL to the given path."
    },
    "abort": {
        "prefix": "abort",
        "body": [
            "abort(403, 'Unauthorized.', \\$headers);"
        ],
        "description": "Miscellaneous."
    },
    "abort_if": {
        "prefix": "abort_if",
        "body": [
            "abort_if(! Auth::user()->isAdmin(), 403);"
        ],
        "description": "Miscellaneous."
    },
    "abort_unless": {
        "prefix": "abort_unless",
        "body": [
            "abort_unless(Auth::user()->isAdmin(), 403);"
        ],
        "description": "Miscellaneous."
    },
    "app": {
        "prefix": "app",
        "body": [
            "app();"
        ],
        "description": "Miscellaneous."
    },
    "auth": {
        "prefix": "auth",
        "body": [
            "auth();"
        ],
        "description": "Miscellaneous."
    },
    "back": {
        "prefix": "back",
        "body": [
            "back();"
        ],
        "description": "Miscellaneous."
    },
    "bcrypt": {
        "prefix": "bcrypt",
        "body": [
            "bcrypt();"
        ],
        "description": "Miscellaneous."
    },
    "broadcast": {
        "prefix": "broadcast",
        "body": [
            "broadcast();"
        ],
        "description": "Miscellaneous."
    },
    "blank": {
        "prefix": "blank",
        "body": [
            "blank();"
        ],
        "description": "Miscellaneous."
    },
    "cache": {
        "prefix": "cache",
        "body": [
            "cache();"
        ],
        "description": "Miscellaneous."
    },
    "class_uses_recursive": {
        "prefix": "cacclass_uses_recursivehe",
        "body": [
            "class_uses_recursive();"
        ],
        "description": "Miscellaneous."
    },
    "collect": {
        "prefix": "collect",
        "body": [
            "collect();"
        ],
        "description": "Miscellaneous."
    },
    "config": {
        "prefix": "config",
        "body": [
            "config();"
        ],
        "description": "Miscellaneous."
    },
    "cookie": {
        "prefix": "cookie",
        "body": [
            "cookie();"
        ],
        "description": "Miscellaneous."
    },
    "csrf_field": {
        "prefix": "csrf_field",
        "body": [
            "csrf_field();"
        ],
        "description": "Miscellaneous."
    },
    "csrf_token": {
        "prefix": "csrf_token",
        "body": [
            "csrf_token();"
        ],
        "description": "Miscellaneous."
    },
    "decrypt": {
        "prefix": "decrypt",
        "body": [
            "decrypt();"
        ],
        "description": "Miscellaneous."
    },
    "dispatch": {
        "prefix": "dispatch",
        "body": [
            "dispatch();"
        ],
        "description": "Miscellaneous."
    },
    "dispatch_now": {
        "prefix": "dispatch_now",
        "body": [
            "dispatch_now();"
        ],
        "description": "Miscellaneous."
    },
    "encrypt": {
        "prefix": "encrypt",
        "body": [
            "encrypt();"
        ],
        "description": "Miscellaneous."
    },
    "env": {
        "prefix": "env",
        "body": [
            "env();"
        ],
        "description": "Miscellaneous."
    },
    "event": {
        "prefix": "event",
        "body": [
            "event();"
        ],
        "description": "Miscellaneous."
    },
    "factory": {
        "prefix": "factory",
        "body": [
            "factory();"
        ],
        "description": "Miscellaneous."
    },
    "filled": {
        "prefix": "filled",
        "body": [
            "filled();"
        ],
        "description": "Miscellaneous."
    },
    "info": {
        "prefix": "info",
        "body": [
            "info();"
        ],
        "description": "Miscellaneous."
    },
    "logger": {
        "prefix": "logger",
        "body": [
            "logger();"
        ],
        "description": "Miscellaneous."
    },
    "method_field": {
        "prefix": "method_field",
        "body": [
            "method_field();"
        ],
        "description": "Miscellaneous."
    },
    "now": {
        "prefix": "now",
        "body": [
            "now();"
        ],
        "description": "Miscellaneous."
    },
    "old": {
        "prefix": "old",
        "body": [
            "old();"
        ],
        "description": "Miscellaneous."
    },
    "optional": {
        "prefix": "optional",
        "body": [
            "optional();"
        ],
        "description": "Miscellaneous."
    },
    "policy": {
        "prefix": "policy",
        "body": [
            "policy();"
        ],
        "description": "Miscellaneous."
    },
    "redirect": {
        "prefix": "redirect",
        "body": [
            "redirect();"
        ],
        "description": "Miscellaneous."
    },
    "report": {
        "prefix": "report",
        "body": [
            "report();"
        ],
        "description": "Miscellaneous."
    },
    "request": {
        "prefix": "request",
        "body": [
            "request();"
        ],
        "description": "Miscellaneous."
    },
    "rescue": {
        "prefix": "rescue",
        "body": [
            "rescue();"
        ],
        "description": "Miscellaneous."
    },
    "resolve": {
        "prefix": "resolve",
        "body": [
            "resolve();"
        ],
        "description": "Miscellaneous."
    },
    "response": {
        "prefix": "response",
        "body": [
            "response();"
        ],
        "description": "Miscellaneous."
    },
    "retry": {
        "prefix": "retry",
        "body": [
            "retry();"
        ],
        "description": "Miscellaneous."
    },
    "session": {
        "prefix": "session",
        "body": [
            "session();"
        ],
        "description": "Miscellaneous."
    },
    "tap": {
        "prefix": "tap",
        "body": [
            "tap();"
        ],
        "description": "Miscellaneous."
    },
    "today": {
        "prefix": "today",
        "body": [
            "today();"
        ],
        "description": "Miscellaneous."
    },
    "throw_if": {
        "prefix": "throw_if",
        "body": [
            "throw_if();"
        ],
        "description": "Miscellaneous."
    },
    "throw_unless": {
        "prefix": "throw_unless",
        "body": [
            "throw_unless();"
        ],
        "description": "Miscellaneous."
    },
    "trait_uses_recursive": {
        "prefix": "trait_uses_recursive",
        "body": [
            "trait_uses_recursive();"
        ],
        "description": "Miscellaneous."
    },
    "transform": {
        "prefix": "transform",
        "body": [
            "transform();"
        ],
        "description": "Miscellaneous."
    },
    "validator": {
        "prefix": "validator",
        "body": [
            "validator();"
        ],
        "description": "Miscellaneous."
    },
    "value": {
        "prefix": "value",
        "body": [
            "value();"
        ],
        "description": "Miscellaneous."
    },
    "view": {
        "prefix": "view",
        "body": [
            "view();"
        ],
        "description": "Miscellaneous."
    },
    "with": {
        "prefix": "with",
        "body": [
            "with();"
        ],
        "description": "Miscellaneous."
    }
}

