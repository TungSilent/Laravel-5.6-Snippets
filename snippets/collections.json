{
    "all()": {
        "prefix": "all()",
        "body": [
            "all();"            
        ],
        "description": "Method Listing."
    },"avg()": {
        "prefix": "avg()",
        "body": [
            "avg();"
        ],
        "description": "Method Listing."
    },"chunk(1)": {
        "prefix": "chunk(1)",
        "body": [
            "chunk(1);"
        ],
        "description": "Method Listing."
    },"collapse()": {
        "prefix": "collapse()",
        "body": [
            "collapse();"
        ],
        "description": "Method Listing."
    },"collapse() For example": {
        "prefix": "collapse() example",
        "body": [
            "\\$collection = collect([[1, 2, 3], [4, 5, 6], [7, 8, 9]]);",
            "\\$collapsed = \\$collectioncollapse();",
            "\\$collapsedall();",
            "// [1, 2, 3, 4, 5, 6, 7, 8, 9]"
        ],
        "description": "Method Listing."
    },"combine(['George', 29])": {
        "prefix": "combine()",
        "body": [
            "combine();"
        ],
        "description": "Method Listing."
    },"combine(['George', 29]) For example": {
        "prefix": "combine() example",
        "body": [
            "\\$collection = collect(['name', 'age']);",
            "\\$combined = \\$collectioncombine(['George', 29]);",
            "\\$combinedall();",
            "// ['name' => 'George', 'age' => 29]"
        ],
        "description": "Method Listing."
    },"concat(['name' => 'Johnny Doe'])": {
        "prefix": "concat()",
        "body": [
            "concat();"
        ],
        "description": "Method Listing."
    },"concat(['name' => 'Johnny Doe']) For example": {
        "prefix": "concat() example",
        "body": [
            "\\$collection = collect(['John Doe']);",
            "\\$concatenated = \\$collectionconcat(['Jane Doe'])concat(['name' => 'Johnny Doe']);",
            "\\$concatenatedall();",
            "// ['John Doe', 'Jane Doe', 'Johnny Doe']"
                    ],
        "description": "Method Listing."
    },"contains()": {
        "prefix": "contains()",
        "body": [
            "contains();"
        ],
        "description": "Method Listing."
    },"contains() For example": {
        "prefix": "contains() example",
        "body": [
            "\\$collection = collect(['name' => 'Desk', 'price' => 100]);",
            "\\$collectioncontains('Desk');",
            "// true",
            "\\$collectioncontains('New York');",
            "// false"
                    ],
        "description": "Method Listing."
    },
    "containsStrict()": {
        "prefix": "containsStrict()",
        "body": [
            "containsStrict();"
        ],
        "description": "Method Listing."
    },
    "count()": {
        "prefix": "count()",
        "body": [
            "count();"
        ],
        "description": "Method Listing."
    },
    "count() For example": {
        "prefix": "count() example",
        "body": [
            "\\$collection = collect([1, 2, 3, 4]);",
            "\\$collectioncount();",
            "// 4"
                    ],
        "description": "Method Listing."
    },
    "crossJoin()": {
        "prefix": "crossJoin()",
        "body": [
            "crossJoin();"
        ],
        "description": "Method Listing."
    },
    "crossJoin() For example": {
        "prefix": "crossJoin() example",
        "body": [
            "\\$collection = collect([1, 2]);",
            "\\$matrix = \\$collectioncrossJoin(['a', 'b'], ['I', 'II']);",
            "\\$matrixall();",
            "/*",
            "    [",
            "        [1, 'a', 'I'],",
            "        [1, 'a', 'II'],",
            "        [1, 'b', 'I'],",
            "        [1, 'b', 'II'],",
            "        [2, 'a', 'I'],",
            "        [2, 'a', 'II'],",
            "        [2, 'b', 'I'],",
            "        [2, 'b', 'II'],",
            "    ]",
            "*/"
                    ],
        "description": "Method Listing."
    },
    "dd()": {
        "prefix": "dd()",
        "body": [
            "dd();"
        ],
        "description": "Method Listing."
    },
    "dd() For example": {
        "prefix": "dd() example",
        "body": [
            "\\$collection = collect(['John Doe', 'Jane Doe']);",
            "\\$collectiondd();",
            "/*",
            "    Collection {",
            "        #items: array:2 [",
            "            0 => 'John Doe'",
            "            1 => 'Jane Doe'",
            "        ]",
            "    }",
            "*/"
                    ],
        "description": "Method Listing."
    },
    "diff()": {
        "prefix": "diff()",
        "body": [
            "diff();"
        ],
        "description": "Method Listing."
    },
    "diff() For example": {
        "prefix": "diff() example",
        "body": [
            "\\$collection = collect([1, 2, 3, 4, 5]);",
            "\\$diff = \\$collectiondiff([2, 4, 6, 8]);",
            "\\$diffall();",
            "// [1, 3, 5]"
                    ],
        "description": "Method Listing."
    },
    "diffAssoc()": {
        "prefix": "diffAssoc()",
        "body": [
            "diffAssoc();"
        ],
        "description": "Method Listing."
    },
    "diffAssoc() For example": {
        "prefix": "diffAssoc() example",
        "body": [
            "\\$collection = collect([",
            "    'color' => 'orange',",
            "    'type' => 'fruit',",
            "    'remain' => 6",
            "]);",
            "\\$diff = \\$collectiondiffAssoc([",
            "    'color' => 'yellow',",
            "    'type' => 'fruit',",
            "    'remain' => 3,",
            "    'used' => 6",
            "]);",
            "\\$diffall();", 
            "// ['color' => 'orange', 'remain' => 6]"
                    ],
        "description": "Method Listing."
    },
    "diffKeys()": {
        "prefix": "diffKeys()",
        "body": [
            "diffKeys();"
        ],
        "description": "Method Listing."
    },
    "diffKeys() For example": {
        "prefix": "diffKeys() example",
        "body": [
            "\\$collection = collect([",
            "    'one' => 10,",
            "    'two' => 20,",
            "    'three' => 30,",
            "    'four' => 40,",
            "    'five' => 50,",
            "]);  ",          
            "\\$diff = \\$collectiondiffKeys([",
            "    'two' => 2,",
            "    'four' => 4,",
            "    'six' => 6,",
            "    'eight' => 8,",
            "]);",            
            "\\$diffall();",            
            "// ['one' => 10, 'three' => 30, 'five' => 50]"
                    ],
        "description": "Method Listing."
    },
    "dump()": {
        "prefix": "dump()",
        "body": [
            "dump();"
        ],
        "description": "Method Listing."
    },
    "dump() For example": {
        "prefix": "dump() example",
        "body": [
            "\\$collection = collect(['John Doe', 'Jane Doe']);",
            "\\$collectiondump();",
            "/*",
            "    Collection {",
            "        #items: array:2 [",
            "            0 => 'John Doe'",
            "            1 => 'Jane Doe'",
            "        ]",
            "    }",
            "*/"
                    ],
        "description": "Method Listing."
    },
    "each()": {
        "prefix": "each()",
        "body": [
            "each();"
        ],
        "description": "Method Listing."
    },
    "each() For example": {
        "prefix": "each() example",
        "body": [
            "\\$collectioneach(function (\\$item, \\$key) {",
            "    if (/* some condition */) {",
            "        return false;",
            "    }",
            "});"
               ],
        "description": "Method Listing."
    },
    "eachSpread()": {
        "prefix": "eachSpread()",
        "body": [
            "eachSpread();"
        ],
        "description": "Method Listing."
    },
    "eachSpread() For example": {
        "prefix": "eachSpread() example",
        "body": [
            "\\$collection = collect([['John Doe', 35], ['Jane Doe', 33]]);",
            "\\$collectioneachSpread(function (\\$name, \\$age) {",
            "        //",
            "});"
               ],
        "description": "Method Listing."
    },
    "every()": {
        "prefix": "every()",
        "body": [
            "every();"
        ],
        "description": "Method Listing."
    },
    "every() For example": {
        "prefix": "every() example",
        "body": [
            "collect([1, 2, 3, 4])every(function (\\$value, \\$key) {",
            "    return \\$value > 2;",
            "});",            
            "// false"
               ],
        "description": "Method Listing."
    },
    "except()": {
        "prefix": "except()",
        "body": [
            "except();"
        ],
        "description": "Method Listing."
    },
    "except() For example": {
        "prefix": "except() example",
        "body": [
            "\\$collection = collect(['product_id' => 1, 'price' => 100, 'discount' => false]);",
            "\\$filtered = \\$collectionexcept(['price', 'discount']);",
            "\\$filteredall();",
            "// ['product_id' => 1]"
               ],
        "description": "Method Listing."
    },
    "filter()": {
        "prefix": "filter()",
        "body": [
            "filter();"
        ],
        "description": "Method Listing."
    },
    "filter() For example": {
        "prefix": "filter() example",
        "body": [
            "\\$collection = collect([1, 2, 3, 4]);",
            "\\$filtered = \\$collectionfilter(function (\\$value, \\$key) {",
            "    return $value > 2;",
            "});",
            "\\$filteredall();",
            "// [3, 4]"
               ],
        "description": "Method Listing."
    },
    "first()": {
        "prefix": "first()",
        "body": [
            "first();"
        ],
        "description": "Method Listing."
    },
    "first() For example": {
        "prefix": "first() example",
        "body": [
            "collect([1, 2, 3, 4])first(function (\\$value, \\$key) {",
            "    return \\$value > 2;",
            "});",
            "// 3"
               ],
        "description": "Method Listing."
    },
    "firstWhere()": {
        "prefix": "firstWhere()",
        "body": [
            "firstWhere();"
        ],
        "description": "Method Listing."
    },
    "firstWhere() For example": {
        "prefix": "firstWhere() example",
        "body": [
            "\\$collection = collect([",
            "    ['name' => 'Regena', 'age' => 12],",
            "    ['name' => 'Linda', 'age' => 14],",
            "    ['name' => 'Diego', 'age' => 23],",
            "    ['name' => 'Linda', 'age' => 84],",
            "]);",            
            "\\$collectionfirstWhere('name', 'Linda');",            
            "// ['name' => 'Linda', 'age' => 14]"
               ],
        "description": "Method Listing."
    },
    "flatMap()": {
        "prefix": "flatMap()",
        "body": [
            "flatMap();"
        ],
        "description": "Method Listing."
    },
    "flatMap() For example": {
        "prefix": "flatMap() example",
        "body": [
            "\\$collection = collect([",
            "    ['name' => 'Sally'],",
            "    ['school' => 'Arkansas'],",
            "    ['age' => 28]",
            "]);",            
            "\\$flattened = \\$collectionflatMap(function (\\$values) {",
            "    return array_map('strtoupper', \\$values);",
            "});" ,           
            "\\$flattenedall(); " ,          
            "// ['name' => 'SALLY', 'school' => 'ARKANSAS', 'age' => '28'];"
               ],
        "description": "Method Listing."
    },
    "flatten()": {
        "prefix": "flatten()",
        "body": [
            "flatten();"
        ],
        "description": "Method Listing."
    },
    "flatten() For example": {
        "prefix": "flatten() example",
        "body": [
            "\\$collection = collect(['name' => 'taylor', 'languages' => ['php', 'javascript']]);",
            "\\$flattened = \\$collectionflatten();",
            "\\$flattenedall();",
            "// ['taylor', 'php', 'javascript'];"
               ],
        "description": "Method Listing."
    },
    "flip()": {
        "prefix": "flip()",
        "body": [
            "flip();"
        ],
        "description": "Method Listing."
    },
    "flip() For example": {
        "prefix": "flip() example",
        "body": [
            "\\$collection = collect(['name' => 'taylor', 'framework' => 'laravel']);",
            "\\$flipped = \\$collectionflip();",
            "\\$flippedall();",
            "// ['taylor' => 'name', 'laravel' => 'framework']"
               ],
        "description": "Method Listing."
    },
    "forPage()": {
        "prefix": "forPage()",
        "body": [
            "forPage();"
        ],
        "description": "Method Listing."
    },
    "forPage() For example": {
        "prefix": "forPage() example",
        "body": [
            "\\$collection = collect([1, 2, 3, 4, 5, 6, 7, 8, 9]);",
            "\\$chunk = \\$collectionforPage(2, 3);",
            "\\$chunkall();",
            "// [4, 5, 6]"
               ],
        "description": "Method Listing."
    },
    "get()": {
        "prefix": "get()",
        "body": [
            "get();"
        ],
        "description": "Method Listing."
    },    
    "groupBy()": {
        "prefix": "groupBy()",
        "body": [
            "groupBy();"
        ],
        "description": "Method Listing."
    },
    "groupBy() For example": {
        "prefix": "groupBy() example",
        "body": [
            "\\$collection = collect([",
            "    ['account_id' => 'account-x10', 'product' => 'Chair'],",
            "    ['account_id' => 'account-x10', 'product' => 'Bookcase'],",
            "    ['account_id' => 'account-x11', 'product' => 'Desk'],",
            "]); ",           
            "\\$grouped = \\$collectiongroupBy('account_id');  "   ,       
            "\\$groupedtoArray();",            
            "/*",
            "    [",
            "        'account-x10' => [",
            "            ['account_id' => 'account-x10', 'product' => 'Chair'],",
            "            ['account_id' => 'account-x10', 'product' => 'Bookcase'],",
            "        ],",
            "        'account-x11' => [",
            "            ['account_id' => 'account-x11', 'product' => 'Desk'],",
            "        ],",
            "    ]",
            "*/"
               ],
        "description": "Method Listing."
    },
    "has()": {
        "prefix": "has()",
        "body": [
            "has();"
        ],
        "description": "Method Listing."
    },
    "has() For example": {
        "prefix": "has() example",
        "body": [
            "\\$collection = collect(['account_id' => 1, 'product' => 'Desk']);",
            "\\$collectionhas('product');",
            "// true"
               ],
        "description": "Method Listing."
    },
    "implode()": {
        "prefix": "implode()",
        "body": [
            "implode();"
        ],
        "description": "Method Listing."
    },
    "implode() For example": {
        "prefix": "implode() example",
        "body": [
            "\\$collection = collect([",
            "    ['account_id' => 1, 'product' => 'Desk'],",
            "    ['account_id' => 2, 'product' => 'Chair'],",
            "]);",            
            "\\$collectionimplode('product', ', ');  " ,         
            "// Desk, Chair"
               ],
        "description": "Method Listing."
    },
    "intersect()": {
        "prefix": "intersect()",
        "body": [
            "intersect();"
        ],
        "description": "Method Listing."
    },
    "intersect() For example": {
        "prefix": "intersect() example",
        "body": [
            "\\$collection = collect(['Desk', 'Sofa', 'Chair']);",
            "\\$intersect = \\$collectionintersect(['Desk', 'Chair', 'Bookcase']);"  ,          
            "\\$intersectall();  ",          
            "// [0 => 'Desk', 2 => 'Chair']"
               ],
        "description": "Method Listing."
    },
    "intersectByKeys()": {
        "prefix": "intersectByKeys()",
        "body": [
            "intersectByKeys();"
        ],
        "description": "Method Listing."
    },
    "intersectByKeys() For example": {
        "prefix": "intersectByKeys() example",
        "body": [
            "\\$collection = collect([",
            "    'serial' => 'UX301', 'type' => 'screen', 'year' => 2009",
            "]);",            
            "\\$intersect = \\$collectionintersectByKeys([",
            "    'reference' => 'UX404', 'type' => 'tab', 'year' => 2011",
            "]);",            
            "\\$intersectall();" ,           
            "// ['type' => 'screen', 'year' => 2009]"
               ],
        "description": "Method Listing."
    },
    "isEmpty()": {
        "prefix": "isEmpty()",
        "body": [
            "isEmpty();"
        ],
        "description": "Method Listing."
    },
    "isEmpty() For example": {
        "prefix": "isEmpty() example",
        "body": [
            "collect([])isEmpty();",
            "    // true"
               ],
        "description": "Method Listing."
    },
    "isNotEmpty()": {
        "prefix": "isNotEmpty()",
        "body": [
            "isNotEmpty();"
        ],
        "description": "Method Listing."
    },
    "isNotEmpty() For example": {
        "prefix": "isNotEmpty() example",
        "body": [
            "collect([])isNotEmpty();",
            "    // false"
               ],
        "description": "Method Listing."
    },
    "keyBy()": {
        "prefix": "keyBy()",
        "body": [
            "keyBy();"
        ],
        "description": "Method Listing."
    },
    "keyBy() For example": {
        "prefix": "keyBy() example",
        "body": [
            "\\$collection = collect([",
            "    ['product_id' => 'prod-100', 'name' => 'Desk'],",
            "    ['product_id' => 'prod-200', 'name' => 'Chair'],",
            "]);  " ,         
            "\\$keyed = \\$collectionkeyBy('product_id');" ,           
            "\\$keyedall(); ",           
            "/*",
            "    [",
            "        'prod-100' => ['product_id' => 'prod-100', 'name' => 'Desk'],",
            "        'prod-200' => ['product_id' => 'prod-200', 'name' => 'Chair'],",
            "    ]",
            "*/"
               ],
        "description": "Method Listing."
    },
    "keys()": {
        "prefix": "keys()",
        "body": [
            "keys();"
        ],
        "description": "Method Listing."
    },
    "keys() For example": {
        "prefix": "keys() example",
        "body": [
            "\\$collection = collect([",
            "    'prod-100' => ['product_id' => 'prod-100', 'name' => 'Desk'],",
            "    'prod-200' => ['product_id' => 'prod-200', 'name' => 'Chair'],",
            "]); " ,          
            "\\$keys = \\$collectionkeys(); "  ,         
            "\\$keysall();   "  ,       
            "// ['prod-100', 'prod-200']"
               ],
        "description": "Method Listing."
    },
    "last()": {
        "prefix": "last()",
        "body": [
            "last();"
        ],
        "description": "Method Listing."
    },
    "last() For example": {
        "prefix": "last() example",
        "body": [
            "collect([1, 2, 3, 4])last(function (\\$value, \\$key) {",
            "    return $value < 3;",
            "});" ,           
            "// 2"
               ],
        "description": "Method Listing."
    },
    "macro()": {
        "prefix": "macro()",
        "body": [
            "macro();"
        ],
        "description": "Method Listing."
    },
    "make() For example": {
        "prefix": "make()",
        "body": [
            "make();"
               ],
        "description": "Method Listing."
    },
    "map()": {
        "prefix": "map()",
        "body": [
            "map();"
        ],
        "description": "Method Listing."
    },
    "map() For example": {
        "prefix": "map() example",
        "body": [
            "\\$collection = collect([1, 2, 3, 4, 5]);",
            "\\$multiplied = \\$collectionmap(function (\\$item, \\$key) {",
            "    return $item * 2;",
            "});",
            "\\$multipliedall();",
            "// [2, 4, 6, 8, 10]"
               ],
        "description": "Method Listing."
    },
    "mapInto()": {
        "prefix": "mapInto()",
        "body": [
            "mapInto();"
        ],
        "description": "Method Listing."
    },
    "mapSpread()": {
        "prefix": "mapSpread()",
        "body": [
            "mapSpread();"
        ],
        "description": "Method Listing."
    },
    "mapSpread() For example": {
        "prefix": "mapSpread() example",
        "body": [
            "\\$collection = collect([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);",
            "\\$chunks = \\$collectionchunk(2);",
            "\\$sequence = \\$chunksmapSpread(function (\\$odd, \\$even) {",
            "    return \\$odd + \\$even;",
            "});",
            "\\$sequenceall();",
            "// [1, 5, 9, 13, 17]"
               ],
        "description": "Method Listing."
    },
    "mapToGroups()": {
        "prefix": "mapToGroups()",
        "body": [
            "mapToGroups();"
        ],
        "description": "Method Listing."
    },
    "mapToGroups() For example": {
        "prefix": "mapToGroups() example",
        "body": [
            "\\$collection = collect([",
            "    [",
            "        'name' => 'John Doe',",
            "        'department' => 'Sales',",
            "    ],",
            "    [",
            "        'name' => 'Jane Doe'",
            "        'department' => 'Sales',",
            "    ],",
            "    [",
            "        'name' => 'Johnny Doe',",
            "        'department' => 'Marketing',",
            "    ]",
            "]);",
            "\\$grouped = \\$collectionmapToGroups(function (\\$item, \\$key) {",
            "    return [\\$item['department'] => \\$item['name']];",
            "});",            
            "\\$groupedtoArray();",          
            "/*",
            "    [",
            "        'Sales' => ['John Doe', 'Jane Doe'],",
            "        'Marketing' => ['Johhny Doe'],",
            "    ]",
            "*/ ",         
            "\\$groupedget('Sales')all(); " ,          
            "// ['John Doe', 'Jane Doe']"
               ],
        "description": "Method Listing."
    },
    "mapWithKeys()": {
        "prefix": "mapWithKeys()",
        "body": [
            "mapWithKeys();"
        ],
        "description": "Method Listing."
    },
    "mapWithKeys() For example": {
        "prefix": "mapWithKeys() example",
        "body": [
            "\\$collection = collect([",
            "    [",
            "        'name' => 'John',",
            "        'department' => 'Sales',",
            "        'email' => 'john@example.com'",
            "    ],",
            "    [",
            "        'name' => 'Jane',",
            "        'department' => 'Marketing',",
            "        'email' => 'jane@example.com'",
            "    ]",
            "]);",
            "\\$keyed = \\$collectionmapWithKeys(function (\\$item) {",
            "    return [\\$item['email'] => \\$item['name']];",
            "}); ",
            "\\$keyedall(); " ,          
            "/*",
            "    [",
            "        'john@example.com' => 'John',",
            "        'jane@example.com' => 'Jane',",
            "    ]",
            "*/"
               ],
        "description": "Method Listing."
    },
    "max()": {
        "prefix": "max()",
        "body": [
            "max();"
        ],
        "description": "Method Listing."
    },
    "max() For example": {
        "prefix": "max() example",
        "body": [
            "\\$max = collect([['foo' => 10], ['foo' => 20]])max('foo');",
            "// 20",
            "\\$max = collect([1, 2, 3, 4, 5])max();",
            "// 5"
               ],
        "description": "Method Listing."
    },
    "median()": {
        "prefix": "median()",
        "body": [
            "median();"
        ],
        "description": "Method Listing."
    },
    "median() For example": {
        "prefix": "median() example",
        "body": [
            "\\$median = collect([['foo' => 10], ['foo' => 10], ['foo' => 20], ['foo' => 40]])median('foo');",
            "// 15",
            "\\$median = collect([1, 1, 2, 4])median();",
            "// 1.5"
               ],
        "description": "Method Listing."
    },
    "merge()": {
        "prefix": "merge()",
        "body": [
            "merge();"
        ],
        "description": "Method Listing."
    },
    "merge() For example": {
        "prefix": "merge() example",
        "body": [
            "\\$collection = collect(['product_id' => 1, 'price' => 100]);",
            "\\$merged = \\$collectionmerge(['price' => 200, 'discount' => false]);",
            "\\$mergedall();",
            "// ['product_id' => 1, 'price' => 200, 'discount' => false]"
               ],
        "description": "Method Listing."
    },
    "min()": {
        "prefix": "min()",
        "body": [
            "min();"
        ],
        "description": "Method Listing."
    },
    "min() For example": {
        "prefix": "min() example",
        "body": [
            "\\$min = collect([['foo' => 10], ['foo' => 20]])min('foo');",
            "// 10",
            "\\$min = collect([1, 2, 3, 4, 5])min();",
            "// 1"
               ],
        "description": "Method Listing."
    },
    "mode()": {
        "prefix": "mode()",
        "body": [
            "mode();"
        ],
        "description": "Method Listing."
    },
    "mode() For example": {
        "prefix": "mode() example",
        "body": [
            "\\$mode = collect([['foo' => 10], ['foo' => 10], ['foo' => 20], ['foo' => 40]])mode('foo');",
            "// [10]",
            "\\$mode = collect([1, 1, 2, 4])mode();",
            "// [1]"
               ],
        "description": "Method Listing."
    },
    "nth()": {
        "prefix": "nth()",
        "body": [
            "nth();"
        ],
        "description": "Method Listing."
    },
    "nth() For example": {
        "prefix": "nth() example",
        "body": [
            "\\$collection = collect(['a', 'b', 'c', 'd', 'e', 'f']);",
            "\\$collectionnth(4);",
            "// ['a', 'e']"
               ],
        "description": "Method Listing."
    },
    "only()": {
        "prefix": "only()",
        "body": [
            "only();"
        ],
        "description": "Method Listing."
    },
    "only() For example": {
        "prefix": "only() example",
        "body": [
            "\\$collection = collect(['product_id' => 1, 'name' => 'Desk', 'price' => 100, 'discount' => false]);",
            "\\$filtered = \\$collectiononly(['product_id', 'name']);",
            "\\$filteredall();",
            "// ['product_id' => 1, 'name' => 'Desk']"
               ],
        "description": "Method Listing."
    },
    "pad()": {
        "prefix": "pad()",
        "body": [
            "pad();"
        ],
        "description": "Method Listing."
    },
    "pad() For example": {
        "prefix": "pad() example",
        "body": [
            "\\$collection = collect(['A', 'B', 'C']);",
            "\\$filtered = \\$collectionpad(5, 0);",
            "\\$filteredall();",
            "// ['A', 'B', 'C', 0, 0]",
            "\\$filtered = \\$collectionpad(-5, 0);",
            "\\$filteredall();",
            "// [0, 0, 'A', 'B', 'C']"
               ],
        "description": "Method Listing."
    },
    "partition()": {
        "prefix": "partition()",
        "body": [
            "partition();"
        ],
        "description": "Method Listing."
    },
    "partition() For example": {
        "prefix": "partition() example",
        "body": [
            "\\$collection = collect([1, 2, 3, 4, 5, 6]);",
            "list(\\$underThree, \\$aboveThree) = \\$collectionpartition(function (\\$i) {",
            "    return \\$i < 3;",
            "});",
            "\\$underThreeall();",
            "// [1, 2]",
            "\\$aboveThreeall();",
            "// [3, 4, 5, 6]"
               ],
        "description": "Method Listing."
    },
    "pipe()": {
        "prefix": "pipe()",
        "body": [
            "pipe();"
        ],
        "description": "Method Listing."
    },
    "pipe() For example": {
        "prefix": "pipe() example",
        "body": [
            "\\$collection = collect([1, 2, 3]);",
            "\\$piped = \\$collectionpipe(function (\\$collection) {",
            "    return $collectionsum();",
            "}); ",
            "// 6"
               ],
        "description": "Method Listing."
    },
    "pluck()": {
        "prefix": "pluck()",
        "body": [
            "pluck();"
        ],
        "description": "Method Listing."
    },
    "pluck() For example": {
        "prefix": "pluck() example",
        "body": [
            "\\$collection = collect([",
            "    ['product_id' => 'prod-100', 'name' => 'Desk'],",
            "    ['product_id' => 'prod-200', 'name' => 'Chair'],",
            "]);",            
            "\\$plucked = \\$collectionpluck('name');",            
            "\\$pluckedall(); ",           
            "// ['Desk', 'Chair']"
               ],
        "description": "Method Listing."
    },
    "pop()": {
        "prefix": "pop()",
        "body": [
            "pop();"
        ],
        "description": "Method Listing."
    },
    "pop() For example": {
        "prefix": "pop() example",
        "body": [
            "\\$collection = collect([1, 2, 3, 4, 5]);",
            "\\$collectionpop();",
            "// 5",
            "\\$collectionall();",
            "// [1, 2, 3, 4]"
               ],
        "description": "Method Listing."
    },
    "prepend()": {
        "prefix": "prepend()",
        "body": [
            "prepend();"
        ],
        "description": "Method Listing."
    },
    "prepend() For example": {
        "prefix": "prepend() example",
        "body": [
            "\\$collection = collect([1, 2, 3, 4, 5]);",
            "\\$collectionprepend(0);",
            "\\$collectionall();",
            "// [0, 1, 2, 3, 4, 5]"
               ],
        "description": "Method Listing."
    },
    "pull()": {
        "prefix": "pull()",
        "body": [
            "pull();"
        ],
        "description": "Method Listing."
    },
    "pull() For example": {
        "prefix": "pull() example",
        "body": [
            "\\$collection = collect(['product_id' => 'prod-100', 'name' => 'Desk']);",
            "\\$collectionpull('name');",
            "// 'Desk'",
            "\\$collectionall();",
            "// ['product_id' => 'prod-100']"
               ],
        "description": "Method Listing."
    },
    "push()": {
        "prefix": "push()",
        "body": [
            "push();"
        ],
        "description": "Method Listing."
    },
    "push() For example": {
        "prefix": "push() example",
        "body": [
            "\\$collection = collect([1, 2, 3, 4]);",
            "\\$collectionpush(5);",
            "\\$collectionall();",
            "// [1, 2, 3, 4, 5]"
               ],
        "description": "Method Listing."
    },
    "put()": {
        "prefix": "put()",
        "body": [
            "put();"
        ],
        "description": "Method Listing."
    },
    "put() For example": {
        "prefix": "put() example",
        "body": [
            "\\$collection = collect(['product_id' => 1, 'name' => 'Desk']);",
            "\\$collectionput('price', 100);",
            "\\$collectionall();",
            "// ['product_id' => 1, 'name' => 'Desk', 'price' => 100]"
               ],
        "description": "Method Listing."
    },
    "random()": {
        "prefix": "random()",
        "body": [
            "random();"
        ],
        "description": "Method Listing."
    },
    "random() For example": {
        "prefix": "random() example",
        "body": [
            "\\$collection = collect([1, 2, 3, 4, 5]);",
            "\\$collectionrandom();",
            "// 4 - (retrieved randomly)"
               ],
        "description": "Method Listing."
    },
    "reduce()": {
        "prefix": "reduce()",
        "body": [
            "reduce();"
        ],
        "description": "Method Listing."
    },
    "reduce() For example": {
        "prefix": "reduce() example",
        "body": [
            "\\$collection = collect([1, 2, 3]);",
            "\\$total = \\$collectionreduce(function (\\$carry, \\$item) {",
            "    return \\$carry + \\$item;",
            "}); ",
            "// 6"
               ],
        "description": "Method Listing."
    },
    "reject()": {
        "prefix": "reject()",
        "body": [
            "reject();"
        ],
        "description": "Method Listing."
    },
    "reject() For example": {
        "prefix": "reject() example",
        "body": [
            "\\$collection = collect([1, 2, 3, 4]);",
            "\\$filtered = \\$collectionreject(function (\\$value, \\$key) {",
            "    return $value > 2;",
            "});",
            "\\$filteredall();",
            "// [1, 2]"
               ],
        "description": "Method Listing."
    },
    "reverse()": {
        "prefix": "reverse()",
        "body": [
            "reverse();"
        ],
        "description": "Method Listing."
    },
    "reverse() For example": {
        "prefix": "reverse() example",
        "body": [
            "\\$collection = collect(['a', 'b', 'c', 'd', 'e']);",
            "\\$reversed = \\$collectionreverse();",
            "\\$reversedall();",
            "/*",
            "    [",
            "        4 => 'e',",
            "        3 => 'd',",
            "        2 => 'c',",
            "        1 => 'b',",
            "        0 => 'a',",
            "    ]",
            "*/"
               ],
        "description": "Method Listing."
    },
    "search()": {
        "prefix": "search()",
        "body": [
            "search();"
        ],
        "description": "Method Listing."
    },
    "search() For example": {
        "prefix": "search() example",
        "body": [
            "\\$collection = collect([2, 4, 6, 8]);",
            "\\$collectionsearch(4);",
            "// 1"
               ],
        "description": "Method Listing."
    },
    "shift()": {
        "prefix": "shift()",
        "body": [
            "shift();"
        ],
        "description": "Method Listing."
    },
    "shift() For example": {
        "prefix": "shift() example",
        "body": [
            "\\$collection = collect([1, 2, 3, 4, 5]);",
            "\\$collectionshift();",
            "// 1",
            "\\$collectionall();",
            "// [2, 3, 4, 5]"
               ],
        "description": "Method Listing."
    },
    "shuffle()": {
        "prefix": "shuffle()",
        "body": [
            "shuffle();"
        ],
        "description": "Method Listing."
    },
    "shuffle() For example": {
        "prefix": "shuffle() example",
        "body": [
            "\\$collection = collect([1, 2, 3, 4, 5]);",
            "\\$shuffled = \\$collectionshuffle();",
            "\\$shuffledall();",
            "// [3, 2, 5, 1, 4] - (generated randomly)"
               ],
        "description": "Method Listing."
    },
    "slice()": {
        "prefix": "slice()",
        "body": [
            "slice();"
        ],
        "description": "Method Listing."
    },
    "slice() For example": {
        "prefix": "slice() example",
        "body": [
            "\\$collection = collect([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);",
            "\\$slice = \\$collectionslice(4);",
            "\\$sliceall();",
            "// [5, 6, 7, 8, 9, 10]"
               ],
        "description": "Method Listing."
    },
    "sort()": {
        "prefix": "sort()",
        "body": [
            "sort();"
        ],
        "description": "Method Listing."
    },
    "sort() For example": {
        "prefix": "sort() example",
        "body": [
            "\\$collection = collect([5, 3, 1, 2, 4]);",
            "\\$sorted = \\$collectionsort();",
            "\\$sortedvalues()all();",
            "// [1, 2, 3, 4, 5]"
               ],
        "description": "Method Listing."
    },
    "sortBy()": {
        "prefix": "sortBy()",
        "body": [
            "sortBy();"
        ],
        "description": "Method Listing."
    },
    "sortBy() For example": {
        "prefix": "sortBy() example",
        "body": [
            "\\$collection = collect([",
            "    ['name' => 'Desk', 'price' => 200],",
            "    ['name' => 'Chair', 'price' => 100],",
            "    ['name' => 'Bookcase', 'price' => 150],",
            "]);",            
            "\\$sorted = \\$collectionsortBy('price'); " ,          
            "\\$sortedvalues()all();" ,           
            "/*",
            "    [",
            "        ['name' => 'Chair', 'price' => 100],",
            "        ['name' => 'Bookcase', 'price' => 150],",
            "        ['name' => 'Desk', 'price' => 200],",
            "    ]",
            "*/"
               ],
        "description": "Method Listing."
    },
    "sortByDesc()": {
        "prefix": "sortByDesc()",
        "body": [
            "sortByDesc();"
        ],
        "description": "Method Listing."
    },
    "sortKeys()": {
        "prefix": "sortKeys()",
        "body": [
            "sortKeys();"
        ],
        "description": "Method Listing."
    },
    "sortKeys() For example": {
        "prefix": "sortKeys() example",
        "body": [
            "\\$collection = collect([",
            "    'id' => 22345,",
            "    'first' => 'John',",
            "    'last' => 'Doe',",
            "]);  ",          
            "\\$sorted = \\$collectionsortKeys();" ,           
            "\\$sortedall();  " ,         
            "/*",
            "    [",
            "        'first' => 'John',",
            "        'id' => 22345,",
            "        'last' => 'Doe',",
            "    ]",
            "*/"
               ],
        "description": "Method Listing."
    },
    "sortKeysDesc()": {
        "prefix": "sortKeysDesc()",
        "body": [
            "sortKeysDesc();"
        ],
        "description": "Method Listing."
    },
    "splice()": {
        "prefix": "splice()",
        "body": [
            "splice();"
        ],
        "description": "Method Listing."
    },
    "splice() For example": {
        "prefix": "splice() example",
        "body": [
            "\\$collection = collect([1, 2, 3, 4, 5]);",
            "\\$chunk = \\$collectionsplice(2);",
            "\\$chunkall();",
            "// [3, 4, 5]",
            "\\$collectionall();",
            "// [1, 2]"
               ],
        "description": "Method Listing."
    },
    "split()": {
        "prefix": "split()",
        "body": [
            "split();"
        ],
        "description": "Method Listing."
    },
    "split() For example": {
        "prefix": "split() example",
        "body": [
            "\\$collection = collect([1, 2, 3, 4, 5]);",
            "\\$groups = \\$collectionsplit(3);",
            "\\$groupstoArray();",
            "// [[1, 2], [3, 4], [5]]"
               ],
        "description": "Method Listing."
    },
    "sum()": {
        "prefix": "sum()",
        "body": [
            "sum();"
        ],
        "description": "Method Listing."
    },
    "sum() For example": {
        "prefix": "sum() example",
        "body": [
                "\\$collection = collect([",
                "    ['name' => 'JavaScript: The Good Parts', 'pages' => 176],",
                "    ['name' => 'JavaScript: The Definitive Guide', 'pages' => 1096],",
                "]);",            
                "\\$collectionsum('pages');" ,           
                "// 1272",

                "\\$collection = collect([",
                "    ['name' => 'Chair', 'colors' => ['Black']],",
                "    ['name' => 'Desk', 'colors' => ['Black', 'Mahogany']],",
                "    ['name' => 'Bookcase', 'colors' => ['Red', 'Beige', 'Brown']],",
                "]);",
                
                "\\$collectionsum(function (\\$product) {",
                "    return count(\\$product['colors']);",
                "});",
                "// 6"
               ],
        "description": "Method Listing."
    },
    "take()": {
        "prefix": "take()",
        "body": [
            "take();"
        ],
        "description": "Method Listing."
    },
    "take() For example": {
        "prefix": "take() example",
        "body": [
            "\\$collection = collect([0, 1, 2, 3, 4, 5]);",
            "\\$chunk = \\$collectiontake(3);",
            "\\$chunkall();",
            "// [0, 1, 2]",
            "\\$collection = collect([0, 1, 2, 3, 4, 5]);",
            "\\$chunk = \\$collectiontake(-2);",
            "\\$chunkall();",
            "// [4, 5]"
               ],
        "description": "Method Listing."
    },
    "tap()": {
        "prefix": "tap()",
        "body": [
            "tap();"
        ],
        "description": "Method Listing."
    },
    "tap() For example": {
        "prefix": "tap() example",
        "body": [
            "collect([2, 4, 3, 1, 5])",
            "    sort()",
            "    tap(function (\\$collection) {",
            "        Log::debug('Values after sorting', \\$collectionvalues()toArray());",
            "    })",
            "    shift();",
            "// 1"
               ],
        "description": "Method Listing."
    },
    "times()": {
        "prefix": "times()",
        "body": [
            "times();"
        ],
        "description": "Method Listing."
    },
    "times() For example": {
        "prefix": "times() example",
        "body": [
            "\\$collection = Collection::times(10, function (\\$number) {",
            "    return \\$number * 9;",
            "});",            
            "\\$collectionall();",            
            "// [9, 18, 27, 36, 45, 54, 63, 72, 81, 90]"
               ],
        "description": "Method Listing."
    },
    "toArray()": {
        "prefix": "toArray()",
        "body": [
            "toArray();"
        ],
        "description": "Method Listing."
    },
    "toArray() For example": {
        "prefix": "toArray() example",
        "body": [
            "\\$collection = collect(['name' => 'Desk', 'price' => 200]);",
            "\\$collectiontoArray();",
            "/*",
            "    [",
            "        ['name' => 'Desk', 'price' => 200],",
            "    ]",
            "*/"
               ],
        "description": "Method Listing."
    },
    "toJson()": {
        "prefix": "toJson()",
        "body": [
            "toJson();"
        ],
        "description": "Method Listing."
    },
    "toJson() For example": {
        "prefix": "toJson() example",
        "body": [
            "\\$collection = collect(['name' => 'Desk', 'price' => 200]);",
            "\\$collectiontoJson();",
            "// '{\"name\":\"Desk\", \"price\":200}'"
               ],
        "description": "Method Listing."
    },
    "transform()": {
        "prefix": "transform()",
        "body": [
            "transform();"
        ],
        "description": "Method Listing."
    },
    "transform() For example": {
        "prefix": "transform() example",
        "body": [
            "\\$collection = collect([1, 2, 3, 4, 5]);",
            "\\$collectiontransform(function (\\$item, \\$key) {",
            "        return \\$item * 2;",
            "});",
            "\\$collectionall();",
            "// [2, 4, 6, 8, 10]"
               ],
        "description": "Method Listing."
    },
    "union()": {
        "prefix": "union()",
        "body": [
            "union();"
        ],
        "description": "Method Listing."
    },
    "union() For example": {
        "prefix": "union() example",
        "body": [
            "\\$collection = collect([1 => ['a'], 2 => ['b']]);",
            "\\$union = \\$collectionunion([3 => ['c'], 1 => ['b']]);",
            "\\$unionall();",
            "// [1 => ['a'], 2 => ['b'], 3 => ['c']]"
               ],
        "description": "Method Listing."
    },
    "unique()": {
        "prefix": "unique()",
        "body": [
            "unique();"
        ],
        "description": "Method Listing."
    },
    "unique() For example": {
        "prefix": "unique() example",
        "body": [
            "\\$collection = collect([1, 1, 2, 2, 3, 4, 2]);",
            "\\$unique = \\$collectionunique();",
            "\\$uniquevalues()all();",
            "// [1, 2, 3, 4]"
               ],
        "description": "Method Listing."
    },
    "uniqueStrict()": {
        "prefix": "uniqueStrict()",
        "body": [
            "uniqueStrict();"
        ],
        "description": "Method Listing."
    },
    "unless()": {
        "prefix": "unless()",
        "body": [
            "unless();"
        ],
        "description": "Method Listing."
    },
    "unless() For example": {
        "prefix": "unless() example",
        "body": [
            "\\$collection = collect([1, 2, 3]);",
            "\\$collectionunless(true, function (\\$collection) {",
            "    return \\$collectionpush(4);",
            "});",
            "\\$collectionunless(false, function (\\$collection) {",
            "    return \\$collectionpush(5);",
            "});",
            "\\$collectionall();",
            "// [1, 2, 3, 5]"
               ],
        "description": "Method Listing."
    },
    "unwrap()": {
        "prefix": "unwrap()",
        "body": [
            "unwrap();"
        ],
        "description": "Method Listing."
    },
    "unwrap() For example": {
        "prefix": "unwrap() example",
        "body": [
            "Collection::unwrap(collect('John Doe'));",
            "// ['John Doe']",
            "Collection::unwrap(['John Doe']);",
            "// ['John Doe']",
            "Collection::unwrap('John Doe');",
            "// 'John Doe'"
               ],
        "description": "Method Listing."
    },
    "values()": {
        "prefix": "values()",
        "body": [
            "values();"
        ],
        "description": "Method Listing."
    },
    "values() For example": {
        "prefix": "values() example",
        "body": [
            "\\$collection = collect([",
            "    10 => ['product' => 'Desk', 'price' => 200],",
            "    11 => ['product' => 'Desk', 'price' => 200]",
            "]);",            
            "\\$values = \\$collectionvalues(); ",           
            "\\$valuesall();",            
            "/*",
            "    [",
            "        0 => ['product' => 'Desk', 'price' => 200],",
            "        1 => ['product' => 'Desk', 'price' => 200],",
            "    ]",
            "*/"
               ],
        "description": "Method Listing."
    },
    "when()": {
        "prefix": "when()",
        "body": [
            "when();"
        ],
        "description": "Method Listing."
    },
    "when() For example": {
        "prefix": "when() example",
        "body": [
            "\\$collection = collect([1, 2, 3]);",
            "\\$collectionwhen(true, function (\\$collection) {",
            "    return \\$collectionpush(4);",
            "});",
            "\\$collectionwhen(false, function (\\$collection) {",
            "    return \\$collectionpush(5);",
            "});",
            "\\$collectionall();",
            "// [1, 2, 3, 4]"
               ],
        "description": "Method Listing."
    },
    "where()": {
        "prefix": "where()",
        "body": [
            "where();"
        ],
        "description": "Method Listing."
    },
    "where() For example": {
        "prefix": "where() example",
        "body": [
            "\\$collection = collect([",
            "    ['product' => 'Desk', 'price' => 200],",
            "    ['product' => 'Chair', 'price' => 100],",
            "    ['product' => 'Bookcase', 'price' => 150],",
            "    ['product' => 'Door', 'price' => 100],",
            "]);",            
            "\\$filtered = \\$collectionwhere('price', 100);",            
            "\\$filteredall();" ,           
            "/*",
            "    [",
            "        ['product' => 'Chair', 'price' => 100],",
            "        ['product' => 'Door', 'price' => 100],",
            "    ]",
            "*/"
               ],
        "description": "Method Listing."
    },
    "whereStrict()": {
        "prefix": "whereStrict()",
        "body": [
            "whereStrict();"
        ],
        "description": "Method Listing."
    },
    "whereIn()": {
        "prefix": "whereIn()",
        "body": [
            "whereIn();"
        ],
        "description": "Method Listing."
    },
    "whereIn() For example": {
        "prefix": "whereIn() example",
        "body": [
            "\\$collection = collect([",
            "    ['product' => 'Desk', 'price' => 200],",
            "    ['product' => 'Chair', 'price' => 100],",
            "    ['product' => 'Bookcase', 'price' => 150],",
            "    ['product' => 'Door', 'price' => 100],",
            "]); " ,          
            "\\$filtered = \\$collectionwhereIn('price', [150, 200]); " ,          
            "\\$filteredall(); ",           
            "/*",
            "    [",
            "        ['product' => 'Bookcase', 'price' => 150],",
            "        ['product' => 'Desk', 'price' => 200],",
            "    ]",
            "*/"
               ],
        "description": "Method Listing."
    },
    "whereInStrict()": {
        "prefix": "whereInStrict()",
        "body": [
            "whereInStrict();"
        ],
        "description": "Method Listing."
    },
    "whereInstanceOf()": {
        "prefix": "whereInstanceOf()",
        "body": [
            "whereInstanceOf();"
        ],
        "description": "Method Listing."
    },
    "whereInstanceOf() For example": {
        "prefix": "whereInstanceOf() example",
        "body": [
            "\\$collection = collect([",
            "    new User,",
            "    new User,",
            "    new Post,",
            "]);",
            "return \\$collectionwhereInstanceOf(User::class);"
               ],
        "description": "Method Listing."
    },
    "whereNotIn()": {
        "prefix": "whereNotIn()",
        "body": [
            "whereNotIn();"
        ],
        "description": "Method Listing."
    },
    "whereNotIn() For example": {
        "prefix": "whereNotIn() example",
        "body": [
            "\\$collection = collect([",
            "    ['product' => 'Desk', 'price' => 200],",
            "    ['product' => 'Chair', 'price' => 100],",
            "    ['product' => 'Bookcase', 'price' => 150],",
            "    ['product' => 'Door', 'price' => 100],",
            "]);", 
            "\\$filtered = \\$collectionwhereNotIn('price', [150, 200]); " ,          
            "\\$filteredall();",            
            "/*",
            "    [",
            "        ['product' => 'Chair', 'price' => 100],",
            "        ['product' => 'Door', 'price' => 100],",
            "    ]",
            "*/"
               ],
        "description": "Method Listing."
    },
    "whereNotInStrict()": {
        "prefix": "whereNotInStrict()",
        "body": [
            "whereNotInStrict();"
        ],
        "description": "Method Listing."
    },
    "wrap()": {
        "prefix": "wrap()",
        "body": [
            "wrap();"
        ],
        "description": "Method Listing."
    },
    "wrap() For example": {
        "prefix": "wrap() example",
        "body": [
            "\\$collection = Collection::wrap('John Doe');",
            "\\$collectionall();",
            "// ['John Doe']",
            "\\$collection = Collection::wrap(['John Doe']);",
            "\\$collectionall();",
            "// ['John Doe']",
            "\\$collection = Collection::wrap(collect('John Doe'));",
            "\\$collectionall();",
            "// ['John Doe']"
               ],
        "description": "Method Listing."
    },
    "zip()": {
        "prefix": "zip()",
        "body": [
            "zip();"
        ],
        "description": "Method Listing."
    }
}
